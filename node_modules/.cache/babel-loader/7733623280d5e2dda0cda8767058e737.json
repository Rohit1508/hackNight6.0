{"ast":null,"code":"import moment from \"moment\";\n\nconst formatDate = (date, format) => {\n  return moment(date).format(format);\n};\n\nconst checkDateRange = (from, to) => {\n  if (from.getTime() <= to.getTime()) {\n    setTrigger(!trigger);\n    setDisplayMessage(\"\");\n  } else {\n    setDisplayMessage(\"Invalid Date Range\");\n  }\n};\n\nconst getCookie = cname => {\n  const name = `${cname}=`;\n  const ca = document.cookie.split(\";\");\n\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n\n    while (c.charAt(0) == \" \") {\n      c = c.substring(1);\n    }\n\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n\n  return \"\";\n};\n\nexport { formatDate, checkDateRange, getCookie };","map":{"version":3,"sources":["/Users/Rohit/Desktop/hackNight6.0/src/services/utils.js"],"names":["moment","formatDate","date","format","checkDateRange","from","to","getTime","setTrigger","trigger","setDisplayMessage","getCookie","cname","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACnC,SAAOH,MAAM,CAACE,IAAD,CAAN,CAAaC,MAAb,CAAoBA,MAApB,CAAP;AACD,CAFD;;AAIA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AACnC,MAAID,IAAI,CAACE,OAAL,MAAkBD,EAAE,CAACC,OAAH,EAAtB,EAAoC;AAClCC,IAAAA,UAAU,CAAC,CAACC,OAAF,CAAV;AACAC,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,GAHD,MAGO;AACLA,IAAAA,iBAAiB,CAAC,oBAAD,CAAjB;AACD;AACF,CAPD;;AASA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACzB,QAAMC,IAAI,GAAI,GAAED,KAAM,GAAtB;AACA,QAAME,EAAE,GAAGC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,QAAIE,CAAC,GAAGN,EAAE,CAACI,CAAD,CAAV;;AACA,WAAOE,CAAC,CAACC,MAAF,CAAS,CAAT,KAAe,GAAtB,EAA2B;AACzBD,MAAAA,CAAC,GAAGA,CAAC,CAACE,SAAF,CAAY,CAAZ,CAAJ;AACD;;AACD,QAAIF,CAAC,CAACG,OAAF,CAAUV,IAAV,KAAmB,CAAvB,EAA0B;AACxB,aAAOO,CAAC,CAACE,SAAF,CAAYT,IAAI,CAACM,MAAjB,EAAyBC,CAAC,CAACD,MAA3B,CAAP;AACD;AACF;;AACD,SAAO,EAAP;AACD,CAbD;;AAeA,SAASlB,UAAT,EAAqBG,cAArB,EAAqCO,SAArC","sourcesContent":["import moment from \"moment\";\n\nconst formatDate = (date, format) => {\n  return moment(date).format(format);\n};\n\nconst checkDateRange = (from, to) => {\n  if (from.getTime() <= to.getTime()) {\n    setTrigger(!trigger);\n    setDisplayMessage(\"\");\n  } else {\n    setDisplayMessage(\"Invalid Date Range\");\n  }\n};\n\nconst getCookie = cname => {\n  const name = `${cname}=`;\n  const ca = document.cookie.split(\";\");\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) == \" \") {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n};\n\nexport { formatDate, checkDateRange, getCookie };\n"]},"metadata":{},"sourceType":"module"}