{"ast":null,"code":"import _objectWithoutProperties from \"/Users/Rohit/Desktop/hackNight6.0/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { forceLogout } from \"../actions/auth-actions\";\n\nfunction getUrlWithQueryParams(url, params) {\n  if (typeof params !== \"object\") {\n    return url;\n  }\n\n  const parts = [];\n  const esc = encodeURIComponent;\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n\n    if (value !== null && value !== undefined) {\n      const part = `${esc(key)}=${esc(value)}`;\n      parts.push(part);\n    }\n  });\n  const qs = parts.join(\"&\");\n  return qs.length ? `${url}?${qs}` : url;\n}\n\nfunction parseJSON(response) {\n  return new Promise(resolve => response.json().then(json => resolve({\n    status: response.status,\n    ok: response.ok,\n    json\n  })));\n}\n\nfunction parseText(response) {\n  return new Promise(resolve => response.text().then(text => resolve({\n    status: response.status,\n    ok: response.ok,\n    text\n  })));\n}\n\nfunction parseResponse(response, responseType) {\n  let parseFn;\n\n  switch (responseType) {\n    case \"json\":\n      parseFn = parseJSON;\n      break;\n\n    case \"text\":\n      parseFn = parseText;\n      break;\n\n    default:\n      break;\n  }\n\n  return parseFn(response);\n}\n\nfunction request(url, options) {\n  const responseType = options.responseType,\n        params = options.params,\n        fetchOptions = _objectWithoutProperties(options, [\"responseType\", \"params\"]);\n\n  const requestUrl = getUrlWithQueryParams(url, params);\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl, fetchOptions).then(response => parseResponse(response, responseType)).then(response => {\n      if (response.ok) {\n        return resolve(response[responseType]);\n      }\n\n      if (response.status === 401) {\n        forceLogout();\n      }\n\n      return reject(response[responseType]);\n    }).catch(error => reject({\n      networkError: error.message\n    }));\n  });\n}\n\nclass HttpService {\n  static getRequest({\n    url,\n    params\n  }) {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      params,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static postRequest({\n    url,\n    body\n  }) {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static putRequest({\n    url,\n    body\n  }) {\n    const options = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static deleteRequest({\n    url,\n    body\n  }) {\n    const options = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n\n    return request(url, options);\n  } // for submitting formData\n\n\n  static postFormDataRequest({\n    url,\n    body\n  }) {\n    // omitting Content-Type header here to allow browswer to automatically\n    // find the request boundaries\n    const options = {\n      method: \"POST\",\n      body,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static putFormDataRequest({\n    url,\n    body\n  }) {\n    const options = {\n      method: \"PUT\",\n      body,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n}\n\nexport default HttpService;","map":{"version":3,"sources":["/Users/Rohit/Desktop/hackNight6.0/src/services/HttpService.js"],"names":["forceLogout","getUrlWithQueryParams","url","params","parts","esc","encodeURIComponent","Object","keys","forEach","key","value","undefined","part","push","qs","join","length","parseJSON","response","Promise","resolve","json","then","status","ok","parseText","text","parseResponse","responseType","parseFn","request","options","fetchOptions","requestUrl","reject","fetch","catch","error","networkError","message","HttpService","getRequest","method","headers","credentials","postRequest","body","JSON","stringify","putRequest","deleteRequest","postFormDataRequest","putFormDataRequest"],"mappings":"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","sourcesContent":["import { forceLogout } from \"../actions/auth-actions\";\n\nfunction getUrlWithQueryParams(url, params) {\n  if (typeof params !== \"object\") {\n    return url;\n  }\n  const parts = [];\n  const esc = encodeURIComponent;\n  Object.keys(params).forEach(key => {\n    const value = params[key];\n    if (value !== null && value !== undefined) {\n      const part = `${esc(key)}=${esc(value)}`;\n      parts.push(part);\n    }\n  });\n  const qs = parts.join(\"&\");\n  return qs.length ? `${url}?${qs}` : url;\n}\n\nfunction parseJSON(response) {\n  return new Promise(resolve =>\n    response.json().then(json =>\n      resolve({\n        status: response.status,\n        ok: response.ok,\n        json\n      })\n    )\n  );\n}\n\nfunction parseText(response) {\n  return new Promise(resolve =>\n    response.text().then(text =>\n      resolve({\n        status: response.status,\n        ok: response.ok,\n        text\n      })\n    )\n  );\n}\n\nfunction parseResponse(response, responseType) {\n  let parseFn;\n  switch (responseType) {\n    case \"json\":\n      parseFn = parseJSON;\n      break;\n    case \"text\":\n      parseFn = parseText;\n      break;\n    default:\n      break;\n  }\n\n  return parseFn(response);\n}\n\nfunction request(url, options) {\n  const { responseType, params, ...fetchOptions } = options;\n  const requestUrl = getUrlWithQueryParams(url, params);\n\n  return new Promise((resolve, reject) => {\n    fetch(requestUrl, fetchOptions)\n      .then(response => parseResponse(response, responseType))\n      .then(response => {\n        if (response.ok) {\n          return resolve(response[responseType]);\n        }\n        if (response.status === 401) {\n          forceLogout();\n        }\n        return reject(response[responseType]);\n      })\n      .catch(error =>\n        reject({\n          networkError: error.message\n        })\n      );\n  });\n}\n\nclass HttpService {\n  static getRequest({ url, params }) {\n    const options = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      params,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static postRequest({ url, body }) {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static putRequest({ url, body }) {\n    const options = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body),\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static deleteRequest({ url, body }) {\n    const options = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n    return request(url, options);\n  }\n\n  // for submitting formData\n  static postFormDataRequest({ url, body }) {\n    // omitting Content-Type header here to allow browswer to automatically\n    // find the request boundaries\n    const options = {\n      method: \"POST\",\n      body,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n\n  static putFormDataRequest({ url, body }) {\n    const options = {\n      method: \"PUT\",\n      body,\n      responseType: \"json\",\n      credentials: \"include\"\n    };\n    return request(url, options);\n  }\n}\n\nexport default HttpService;\n"]},"metadata":{},"sourceType":"module"}